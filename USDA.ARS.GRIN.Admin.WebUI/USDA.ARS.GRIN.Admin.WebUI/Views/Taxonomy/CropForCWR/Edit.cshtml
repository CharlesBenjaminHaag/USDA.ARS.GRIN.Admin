@model USDA.ARS.GRIN.Admin.WebUI.ViewModels.Taxonomy.CropForCWRViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
<script src="https://cdn.ckeditor.com/4.16.0/standard/ckeditor.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/start/jquery-ui.css">
<style>
    .alert-error {
        padding: 10px;
        margin: 5px;
    }
</style>
@{
    string IDLabel = String.Empty;

    if (Model.ID > 0)
    {
        IDLabel = "(" + Model.ID + ")";
    }
    else
    {
        IDLabel = String.Empty;
    }
}
@if (Model.ID > 0)
{
    <div class="row">
        <div class="col-md-12">
            <div class="callout callout-info" style="vertical-align:middle;">
                @Html.Raw(Model.RevisionHistoryText)
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("CropForCWREdit", "Taxonomy", FormMethod.Post, new { id = "frmEdit" }))
{
    @Html.HiddenFor(x => x.ID, new { id = "hfCropID", name = "ID" })
    <div class="box box-default">
        <div class="box-header">
            <h3 class="box-title">Detail @IDLabel</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div class="box-body">
            @Html.ValidationSummary()
            @Html.Raw(Model.ErrorMessage)
            <div class="row">
                <div class="col-md-12">
                    <label>Name</label>
                    @Html.TextBoxFor(x => x.CropName, new { @id = "txtCropName", @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.CropName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-12" style="margin-top:1.0em;">
                    <label>Note</label>
                    @Html.TextAreaFor(x => x.Note, new { @id = "txtNote", @class = "form-control" })
                    <script>
                        CKEDITOR.replace('txtNote');
                    </script>
                </div>
            </div>
        </div>
        <div class="box-footer">
            <button type="submit" class="btn btn-default">Save Edits</button>
            <button type="button" class="btn btn-default pull-right" data-toggle="modal" data-target="#modal-note-search">Search Notes...</button>
        </div>
    </div>
}

@if (Model.ID > 0)
{
    <div class="box box-default">
        <div class="box-header">
            <h3 class="box-title">CWR Maps</h3>
            <div class="box-tools pull-right">
                <button type="button" class="btn btn-box-tool" data-widget="collapse">
                    <i class="fa fa-minus"></i>
                </button>
            </div>
        </div>
        <div id="section-crop-map-list" class="box-body">
            <div class="row">
                <div id="section-cwr-map-list" class="col-md-12">
                    @{Html.RenderAction("CWRMapList", "Taxonomy", new { cropId = Model.ID });}
                </div>
            </div>
        </div>
    </div>
}

<!--
=====================================================================================
NOTE-SEARCH MODAL
=====================================================================================
-->
<div class="modal fade" id="modal-note-search">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Note Search</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="input-group">
                            <input type="text" id="txtSearchNotes" class="form-control">
                            <span class="input-group-btn">
                                <button type="button" id="btnSearchNotes" class="btn btn-info btn-flat">Search</button>
                            </span>
                        </div>
                    </div>
                </div>
                <div id="section-note-search-results">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger pull-right" data-dismiss="modal">Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<!--
=====================================================================================
CWR-TRAIT MODAL
=====================================================================================
-->
<div class="modal fade" id="modal-cwr-trait">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Apply CWR Trait to Selected Records</h4>
            </div>
            <div class="modal-body">
                <div class="row" style="margin-bottom:1.2rem;">
                    <div class="form-group">
                        <label for="txtName" class="col-sm-2 control-label">Trait Class</label>
                        <div class="col-sm-10">
                            @Html.DropDownListFor(x => Model.CWRTraitViewModel.TraitClassCode, Model.CWRTraitViewModel.TraitClassCodes, "Select a trait class code", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="row" style="margin-bottom:1.2rem;">
                    <div class="form-group">
                        <label for="txtName" class="col-sm-2 control-label">Breeding Type</label>
                        <div class="col-sm-10">
                            @Html.DropDownListFor(x => x.CWRTraitViewModel.BreedingTypeCode, Model.CWRTraitViewModel.BreedingTypeCodes, "Select a breeding type code", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="row" style="margin-bottom:1.2rem;">
                    <div class="form-group">
                        <label for="txtName" class="col-sm-2 control-label">Breeding Usage</label>
                        <div class="col-sm-10">
                            @Html.TextBoxFor(x => x.CWRTraitViewModel.BreedingUsageNote, new { @id = "txtBreedingUsageNote", @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <label for="txtName" class="col-sm-2 control-label">Ontology Trait Identifier</label>
                        <div class="col-sm-10">
                            @Html.TextBoxFor(x => x.CWRTraitViewModel.OntologyTraitIdentifier, new { @id = "txtOntologyTraitIdentifier", @class = "form-control" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                <button type="button" id="btnSaveTrait" class="btn btn-primary">Save changes</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>


<script type="text/javascript">

//$(document).ready(function () {
//    var timeoutId;

//    $('form input, form textarea').on('input propertychange change', function () {
//        console.log('Textarea Change');

//        clearTimeout(timeoutId);
//        timeoutId = setTimeout(function () {
//            // Runs 1 second (1000 ms) after the last change
//            saveToDB();
//        }, 1000);
//    });

//    function saveToDB() {
//        console.log('Saving to the db');
//        //$('#status-holder').html('<span class=label label-default>SAVING CHANGES...</span>');
//        $("#frmEdit").submit();
//    }
//});

    $("#btnSaveTrait").click(function () {
        var valueArray = [];
        var traitClassCode = "";
        var breedingTypeCode = "";
        var breedingUsageNote = "";
        var ontologyTraitIdentifier = "";

        $('#modal-cwr-trait').modal('hide');

        traitClassCode = $("#CWRTraitViewModel_TraitClassCode").val();
        breedingTypeCode = $("#CWRTraitViewModel_BreedingTypeCode").val();
        breedingUsageNote = $("#txtBreedingUsageNote").val();
        ontologyTraitIdentifier = $("#txtOntologyTraitIdentifier").val();

        $("#section-crop-map-list input:checked").each(function () {
            var id = $(this).attr("id");
            valueArray.push(id);
            }
        );

        $.ajax({
            url: '@Url.Action("ApplyCWRTrait","Taxonomy")',
            type: "GET",
            data: { traitClassCode: traitClassCode, breedingTypeCode: breedingTypeCode, breedingUsageNote: breedingUsageNote, ontologyTraitIdentifier: ontologyTraitIdentifier, cwrMapIdList:valueArray.toString() },
            cache: false,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                var link = '@Url.Action("CWRMapListByCWRCrop", "Taxonomy", new { cropForCwrId = Model.ID })';
                $("#section-cwr-map-list").load(link);
            }
        });
    });


function SelectNote(noteText) {
            $('#modal-note-search').modal('hide');
    CKEDITOR.instances.txtNote.setData(noteText);
        }

$("#btnSearchNotes").click(function () {
            var noteContext = "taxonomy_cwr_crop";
            var url = "/Taxonomy/FindNotes/";
            var inputSearchString = $("#txtSearchNotes").val();

            $.post(url, { searchString: inputSearchString, context: noteContext })
                .done(function (response) {
                    $("#section-note-search-results").html(response);
                });
        });

$(document).on("click", "[id*='btnDeleteMultiple']", function(){
            var valueArray = [];
            var url = "";
            var inputCropId = 0;

            inputCropId = $("#hfCropID").val();

            $("#section-crop-map-list input:checked").each(function () {
                var id = $(this).attr("id");
                valueArray.push(id);
                }
            );

           url = '@Url.Action("CropMapsDelete", "Taxonomy")';

            $.get(url, { cropId: inputCropId, cropMapIdList: valueArray.toString() })
                .done(function (response) {
                    $("#section-crop-map-list").html(response);
            });
        });

</script>
